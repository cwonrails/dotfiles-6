# vim:ft=zsh ts=2 sw=2 sts=2

# Colors
TIME_BG=236
TIME_FG=white
CONTEXT_BG=white
CONTEXT_FG=black
GIT_FG=black
DIR_BG=blue
DIR_FG=black
STATUS_BG=236
STATUS_FG=default

CURRENT_BG='NONE'

# Characters
PROMPT_CHAR="❯"
SEGMENT_SEPARATOR="\ue0b0"
PLUSMINUS="\u00b1"
BRANCH="\ue0a0"
DETACHED="\u27a6"
CROSS="\u2718"
LIGHTNING="\u26a1"
GEAR="\u2699"
CLOCKS=(🕛 🕧 🕐 🕜 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 🕙 🕥 🕚 🕦)

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    print -n "%{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%}"
  else
    print -n "%{$bg%}%{$fg%}"
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -n $3
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    print -n "%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    print -n "%{%k%}"
  fi
  print -n "%{%f%}"
  CURRENT_BG=''
}

### Prompt components
# Each component will draw itself, and hide itself if no information needs to be shown

# Context: user@hostname (who am I and where am I)
prompt_context() {
  if [[ -n "$SSH_CONNECTION" ]]; then
    prompt_segment $CONTEXT_BG $CONTEXT_FG " %n@%m "
  fi
}

# Git: branch/detached head, dirty status
prompt_git() {
  local color ref
  is_dirty() {
    test -n "$(git status --porcelain --ignore-submodules)"
  }
  ref="$vcs_info_msg_0_"
  if [[ -n "$ref" ]]; then
    if is_dirty; then
      color=yellow
      ref="${ref} $CROSS "
    else
      color=green
      ref="${ref} "
    fi
    if [[ "${ref/.../}" == "$ref" ]]; then
      ref="$BRANCH $ref"
    else
      ref="$DETACHED ${ref/.../}"
    fi
    prompt_segment $color $GIT_FG
    print -Pn " $ref"
  fi
}

# Dir: current working directory
prompt_dir() {
  prompt_segment $DIR_BG $DIR_FG ' %~ '
}

# Status:
# - was there an error
# - am I root
# - are there background jobs?
prompt_status() {
  local symbols
  symbols=()
  [[ $UID -eq 0 ]] && symbols+="%{%F{yellow}%}$LIGHTNING"
  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{%F{cyan}%}$GEAR"

  [[ -n "$symbols" ]] && prompt_segment $STATUS_BG $STATUS_FG " $symbols "
}

# Display current time
prompt_time() {
  prompt_segment $TIME_BG $TIME_FG
  print -Pn "%* "
}

prompt_analog_clock() {
  local hhmm="$(date "+hh=%I mm=%M")"
  local -i hh mm clock
  eval ${hhmm//=0/=}
  if (( mm < 15 )); then
    mm=0
  elif (( mm >= 15 )) && (( mm < 45 )); then
    mm=30
  else
    hh=$(( hh + 1 ))
    mm=0
  fi
  clock=$(( ((hh % 12) + (mm / 60.0)) / 12 * 24 + 1 ))

  prompt_segment $TIME_BG $TIME_FG
  print -Pn " ${CLOCKS[clock]} "
}

prompt_human_time_to_var() {
  local human=" " total_seconds=$1 var=$2
  local days=$(( total_seconds / 60 / 60 / 24 ))
  local hours=$(( total_seconds / 60 / 60 % 24 ))
  local minutes=$(( total_seconds / 60 % 60 ))
  local seconds=$(( total_seconds % 60 ))
  (( days > 0 )) && human+="${days}d "
  (( hours > 0 )) && human+="${hours}h "
  (( minutes > 0 )) && human+="${minutes}m "
  human+="${seconds}s"

  # store human readable time in variable as specified by caller
  typeset -g "${var}"="${human}"
}

prompt_maximbaz_check_cmd_exec_time() {
  integer elapsed
  (( elapsed = SECONDS - ${prompt_maximbaz_cmd_timestamp:-$SECONDS} ))
  prompt_maximbaz_cmd_exec_time=
  (( elapsed >= 5 )) && {
    prompt_human_time_to_var $elapsed "prompt_maximbaz_cmd_exec_time"
  }
  unset prompt_maximbaz_cmd_timestamp
}

## Main prompt
prompt_maximbaz_main() {
  CURRENT_BG='NONE'
  prompt_analog_clock
  prompt_time
  prompt_status
  prompt_context
  prompt_dir
  prompt_git
  prompt_end
}

prompt_maximbaz_precmd() {
  prompt_maximbaz_check_cmd_exec_time

  vcs_info

  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
  RPROMPT='%F{yellow}${prompt_maximbaz_cmd_exec_time}%f'
  PROMPT='
%{%f%b%k%}$(prompt_maximbaz_main)
%B%(?.%F{blue}.%F{red})${PROMPT_CHAR}%f%b  ${editor_info[keymap]}'
}

prompt_maximbaz_preexec() {
  prompt_maximbaz_cmd_timestamp=$SECONDS
}

prompt_maximbaz_setup() {
  # Don't display percentages when newline is missing
  export PROMPT_EOL_MARK=''

  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  prompt_opts=(cr subst percent)

  add-zsh-hook precmd prompt_maximbaz_precmd
  add-zsh-hook preexec prompt_maximbaz_preexec

  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'

  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:*' check-for-changes false
  zstyle ':vcs_info:git*' formats '%b'
  zstyle ':vcs_info:git*' actionformats '%b (%a)'
}

prompt_maximbaz_setup "$@"
